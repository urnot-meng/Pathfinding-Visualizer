{"version":3,"sources":["PathfindingVisualizer/instruct.gif","PathfindingVisualizer/Node/Node.jsx","Algorithm/pathfindingAlgorithms.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Node","_Component","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","apply","arguments","_inherits","_createClass","key","value","e","preventDefault","_this$props","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","React","createElement","id","concat","className","onDragStart","handleDragStart","Component","dijkstra","grid","start","finish","visitedInOrder","distance","unvisited","allNodes","length","sort","a","b","closest","shift","Infinity","isVisited","push","updateUnvisitedNeighbors","DFS","node","pop","getUNeighbors","BFS","neighbors","reN","index","neighbor","previousNode","AStar","heuristic","cur","updateUnvisitedNeighborsStar","_i","_neighbors","manhattanDistance","ar","ac","br","bc","Math","abs","_step","re","_iterator","_createForOfIteratorHelper","s","n","done","_step2","_iterator2","err","f","_i2","_neighbors2","randomSelect","path","min","max","floor","random","getNeighbors","visited","points","height","width","pRe","_points$index","validate","slice","connected","unconnected","forEach","nr","nc","_visited$index","ir","ic","c","u","connect","makeWall","isW","newNode","_objectSpread","PathFindingVisualizer","_this","call","hideModal","setState","showModal","state","FR","FC","mouseIsPressed","changingStart","changingFinish","visualized","rendering","numRow","numCol","SR","SC","speed","delays","slow","medium","fast","currentAlgorithm","algorithms","pathfindingAlgorithms","visualizePathfinding","bind","_assertThisInitialized","clearVisualizer","setAlgorithm","handleMouseEnter","handleMouseUp","handleMouseDown","algoId","initializeGrid","clearWall","currentRow","element","document","getElementById","createNode","updateGridWithWall","clearVisitedAndPath","currentNode","newGrid","map","r","cell","updates","_this2","g","shortedPath","unshift","getShortestPath","_loop","i","setTimeout","_loop2","console","log","_this3","Fragment","style","marginBottom","src","instruct_gif","alt","type","onClick","Navbar","bg","expand","collapseOnSelect","Brand","href","Toggle","aria-controls","Collapse","Nav","Dropdown","as","NavItem","NavLink","variant","Menu","algorithm","Item","Link","setSpeed","j","splice","_getNeighbors","rn","primMaze","disabled","onMouseLeave","rowId","nodeId","Object","assign","App","PathfindingVisualizer","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.7c86d1cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/instruct.4805acf9.gif\";","import React, { Component } from \"react\";\n\nimport \"./Node.css\";\n\nexport default class Node extends Component {\n  handleDragStart(e) {\n    e.preventDefault();\n  }\n\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n    } = this.props;\n    const extraClassName = isFinish\n      ? \"node-finish\"\n      : isStart\n      ? \"node-start\"\n      : isWall && !isStart && !isFinish\n      ? \"node-wall\"\n      : \"\";\n\n    return (\n      <td\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n        onDragStart={this.handleDragStart}\n      ></td>\n    );\n  }\n}\n","function dijkstra(grid, start, finish) {\n    const visitedInOrder = [];\n    start.distance = 0;\n    const unvisited = allNodes(grid);\n    while (unvisited.length) {\n        sortNodes(unvisited);\n        const closest = unvisited.shift();\n        if (closest === finish) {\n            return visitedInOrder;\n        }\n        if (closest.isWall) continue; // skip if it is a wall\n        if (closest.distance === Infinity) return visitedInOrder; // no path, return\n        closest.isVisited = true;\n        visitedInOrder.push(closest);\n\n        updateUnvisitedNeighbors(closest, grid);\n    }\n    return visitedInOrder;\n}\n\nfunction DFS(grid, start, finish) {\n    const visitedInOrder = [];\n    let unvisited = [];\n    unvisited.push(start);\n    while (unvisited.length) {\n        const node = unvisited.pop(); // pop the last element\n        if (node === finish) {\n            return visitedInOrder;\n        }\n        if (node.isWall) continue;\n        node.isVisited = true;\n        visitedInOrder.push(node);\n\n        unvisited = unvisited.concat(getUNeighbors(node, grid));\n    }\n\n    return visitedInOrder;\n}\n\nfunction BFS(grid, start, finish) {\n    const visitedInOrder = [];\n    let unvisited = [];\n    unvisited.push(start);\n    while (unvisited.length) {\n        const node = unvisited.shift(); // pop the first element\n        if (node === finish) {\n            return visitedInOrder;\n        }\n        if (node.isWall) continue;\n        node.isVisited = true;\n        visitedInOrder.push(node);\n\n        unvisited = unvisited.concat(getUNeighbors(node, grid));\n    }\n\n    return visitedInOrder;\n}\n\nfunction getUNeighbors(node, grid) {\n    const neighbors = [];\n    const reN = [];\n    const { row, col } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n\n    for (let index = 0; index < neighbors.length; index++) {\n        const neighbor = neighbors[index];\n        if (!neighbor.isVisited) {\n            neighbor.previousNode = node;\n            neighbor.isVisited = true;\n            reN.push(neighbor);\n        }\n    }\n    return reN;\n\n}\n\nfunction AStar(grid, start, finish) {\n    const visitedInOrder = [];\n    start.distance = 0;\n    start.heuristic = 0;\n    const unvisited = allNodes(grid);\n    while (unvisited.length) {\n        sortNodesStar(unvisited);\n        const cur = unvisited.shift();\n        if (cur === finish) {\n            return visitedInOrder;\n        }\n        if (cur.isWall) continue;\n        if (cur.distance + cur.heuristic === Infinity) return visitedInOrder;\n        cur.isVisited = true;\n        visitedInOrder.push(cur);\n\n        updateUnvisitedNeighborsStar(cur, grid, finish);\n    }\n    return visitedInOrder;\n}\n\nfunction updateUnvisitedNeighborsStar(cur, grid, finish) {\n    const neighbors = [];\n    const { row, col } = cur;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    for (const neighbor of neighbors) {\n        if (!neighbor.isVisited) {\n            neighbor.distance = cur.distance + 1;\n            neighbor.heuristic = manhattanDistance(neighbor, finish);\n            neighbor.previousNode = cur;\n        }\n    }\n}\n\nfunction manhattanDistance(a, b) {\n    let { row: ar, col: ac } = a;\n    let { row: br, col: bc } = b;\n    return Math.abs(ar - br) + Math.abs(ac - bc);\n}\n\nfunction allNodes(grid) {\n    const re = [];\n    for (const row of grid) {\n        for (const node of row) {\n            re.push(node);\n        }\n    }\n    return re;\n}\n\nfunction sortNodesStar(nodes) {\n    nodes.sort((a, b) => (a.distance + a.heuristic) - (b.distance + b.heuristic));\n}\n\n\nfunction sortNodes(nodes) {\n    nodes.sort((a, b) => a.distance - b.distance);\n}\n\nfunction updateUnvisitedNeighbors(closest, grid) {\n    const neighbors = [];\n    const { row, col } = closest;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    for (const neighbor of neighbors) {\n        if (!neighbor.isVisited) {\n            neighbor.distance = closest.distance + 1;\n            neighbor.previousNode = closest;\n        }\n    }\n}\n\nfunction getShortestPath(finish) {\n    const path = [];\n    let cur = finish;\n    while (cur !== null) {\n        path.unshift(cur); // add to the front of the array\n        cur = cur.previousNode;\n    }\n    return path;\n}\n\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction primMaze(grid) { // generate a maze using Prim's algorithm\n    let sr = 7, sc = 17; // set a starting point for generating maze\n    let height = grid.length, width = grid[0].length;\n    for (let i = 0; i < height; i++) {\n        for (let j = 0; j < width; j++) {\n            makeWall(grid, i, j, false);\n        }\n\n    }\n    for (let i = 0; i < height; i++) {\n        for (let j = i % 2 + 1; j < width; j += i % 2 + 1) {\n            makeWall(grid, i, j, true);\n        }\n    }\n    for (let i = 0; i < height; i++) {\n        makeWall(grid, i, 0, true);\n    }\n    let visited = [];\n    let path = [{ row: sr, col: sc }];\n    while (path.length > 0) {\n        const index = randomSelect(path);\n        const node = path[index];\n        path.splice(index, 1);\n        visited = visited.concat([node]);\n        const { c: connected, u: unconnected } = getNeighbors(grid, visited, node);\n        if (connected.length > 0) {\n            let rn = randomSelect(connected);\n            connect(grid, node, connected[rn]);\n            connected.splice(rn);\n        }\n        path = path.concat(unconnected);\n\n    }\n}\n\nfunction randomSelect(path) {\n    return randomInt(0, path.length - 1);\n}\n\nfunction validate(grid, points) {\n    let height = grid.length, width = grid[0].length;\n    let pRe = [];\n    for (let index = 0; index < points.length; index++) {\n        let { row, col } = points[index];\n        if ((0 <= row && row < height && 0 <= col && col < width)) {\n            pRe.push(points[index]);\n        }\n    }\n    return pRe;\n\n}\n\nfunction isVisited(visited, node) {\n    let { row: nr, col: nc } = node;\n    for (let index = 0; index < visited.length; index++) {\n        let { row: ir, col: ic } = visited[index];\n        if (nr === ir && nc === ic) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction getNeighbors(grid, visited, node) {\n    let { row, col } = node;\n    let neighbors = [{ row: row + 2, col: col }, { row: row - 2, col: col }, { row: row, col: col + 2 }, { row: row, col: col - 2 }];\n    neighbors = validate(grid, neighbors.slice());\n    let connected = [];\n    let unconnected = [];\n    neighbors.forEach(neighbor => {\n        if (isVisited(visited, neighbor)) {\n            connected.push(neighbor);\n        }\n        else {\n            unconnected.push(neighbor);\n        }\n    });\n    return { c: connected, u: unconnected };\n}\n\nfunction connect(grid, a, b) {\n    let { row: ar, col: ac } = a;\n    let { row: br, col: bc } = b;\n    let row = (ar + br) / 2;\n    let col = (ac + bc) / 2;\n    makeWall(grid, row, col, false);\n}\n\nfunction makeWall(grid, row, col, isW) {\n    const node = grid[row][col];\n    const newNode = {\n        ...node,\n        isWall: isW,\n    }\n    grid[row][col] = newNode;\n}\n\nexport { dijkstra, BFS, DFS, AStar, getShortestPath, primMaze };","import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport { Navbar, Nav, Dropdown, NavItem, NavLink } from \"react-bootstrap\";\nimport {\n  dijkstra,\n  BFS,\n  DFS,\n  AStar,\n  getShortestPath,\n  primMaze,\n} from \"../Algorithm/pathfindingAlgorithms\";\nimport \"./PathfindingVisualizer.css\";\nimport instruct_gif from \"./instruct.gif\";\n\nexport default class PathFindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      FR: 7,\n      FC: 31,\n      mouseIsPressed: false,\n      changingStart: false,\n      changingFinish: false,\n      visualized: false,\n      rendering: false,\n      numRow: 17,\n      numCol: 37,\n      SR: 7,\n      SC: 5,\n      speed: \"medium\",\n      delays: { slow: 17, medium: 7, fast: 3 },\n      currentAlgorithm: -1,\n      algorithms: [\"BFS\", \"Dijkstra\", \"A*\", \"DFS\"],\n      pathfindingAlgorithms: [BFS, dijkstra, AStar, DFS],\n      showModal: true,\n    };\n    this.visualizePathfinding = this.visualizePathfinding.bind(this);\n    this.clearVisualizer = this.clearVisualizer.bind(this);\n    this.setAlgorithm = this.setAlgorithm.bind(this);\n    this.handleMouseEnter = this.handleMouseEnter.bind(this);\n    this.handleMouseUp = this.handleMouseUp.bind(this);\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n  }\n\n  setAlgorithm(algoId) {\n    this.setState({ currentAlgorithm: algoId });\n  }\n\n  isRendering() {\n    return this.state.rendering;\n  }\n\n  hideModal = () => {\n    this.setState({ showModal: false });\n  };\n\n  componentDidMount() {\n    const grid = this.initializeGrid(false);\n    this.setState({\n      grid: grid,\n      currentAlgorithm: -1,\n    });\n  }\n\n  initializeGrid(clearWall) {\n    const grid = [];\n    for (let row = 0; row < this.state.numRow; row++) {\n      const currentRow = [];\n      for (let col = 0; col < this.state.numCol; col++) {\n        let isW = false;\n        const element = document.getElementById(`node-${row}-${col}`);\n        if (\n          element &&\n          (element.className === \"node node-path\" ||\n            element.className === \"node node-visited\")\n        ) {\n          element.className = \"node\";\n        }\n        if (!clearWall && element && element.className === \"node node-wall\") {\n          isW = true;\n        }\n        currentRow.push(this.createNode(row, col, isW));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  }\n\n  createNode(row, col, isW) {\n    return {\n      col,\n      row,\n      isStart: row === this.state.SR && col === this.state.SC,\n      isFinish: row === this.state.FR && col === this.state.FC,\n      distance: Infinity,\n      heuristic: Infinity,\n      isVisited: false,\n      isWall: isW,\n      previousNode: null,\n    };\n  }\n\n  handleMouseDown(row, col) {\n    if (this.state.rendering) return;\n    if (row === this.state.SR && col === this.state.SC) {\n      this.setState({ changingStart: true });\n    } else if (row === this.state.FR && col === this.state.FC) {\n      this.setState({ changingFinish: true });\n    } else if (!this.state.rendering) {\n      this.updateGridWithWall(this.state.grid, row, col);\n      this.setState({ mouseIsPressed: true });\n      this.clearVisitedAndPath();\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    if (this.state.rendering) return;\n    const currentNode = this.state.grid[row][col];\n\n    // Deep clone the grid\n    const newGrid = this.state.grid.map((r) => r.map((cell) => ({ ...cell })));\n    const updates = {};\n\n    if (this.state.mouseIsPressed) {\n      this.updateGridWithWall(newGrid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    } else if (\n      this.state.changingStart &&\n      !(row === this.state.FR && col === this.state.FC) &&\n      !currentNode.isWall\n    ) {\n      newGrid[this.state.SR][this.state.SC].isStart = false;\n      newGrid[row][col].isStart = true;\n\n      updates.grid = newGrid;\n      updates.SR = row;\n      updates.SC = col;\n      this.clearVisitedAndPath();\n    } else if (\n      this.state.changingFinish &&\n      !(row === this.state.SR && col === this.state.SC) &&\n      !currentNode.isWall\n    ) {\n      newGrid[this.state.FR][this.state.FC].isFinish = false;\n      newGrid[row][col].isFinish = true;\n\n      updates.grid = newGrid;\n      updates.FR = row;\n      updates.FC = col;\n      this.clearVisitedAndPath();\n    }\n    this.setState(updates);\n  }\n\n  handleMouseUp() {\n    this.setState({\n      changingStart: false,\n      changingFinish: false,\n      mouseIsPressed: false,\n    });\n  }\n\n  updateGridWithWall(grid, row, col) {\n    const node = grid[row][col];\n\n    if (!node.isStart && !node.isFinish) {\n      const newNode = {\n        ...node,\n        isWall: !node.isWall,\n      };\n      grid[row][col] = newNode;\n    }\n  }\n\n  visualizePathfinding() {\n    if (this.state.currentAlgorithm === -1) return;\n    if (this.state.rendering) return;\n\n    this.setState({ visualized: true, rendering: true });\n    let g = this.initializeGrid(false);\n    this.setState({\n      grid: g,\n    });\n    const grid = this.state.grid;\n    const start = grid[this.state.SR][this.state.SC];\n    const finish = grid[this.state.FR][this.state.FC];\n    const visitedInOrder = this.state.pathfindingAlgorithms[\n      this.state.currentAlgorithm\n    ](grid, start, finish);\n    const shortedPath = getShortestPath(finish);\n    for (let i = 0; i < visitedInOrder.length; i++) {\n      setTimeout(() => {\n        const node = visitedInOrder[i];\n        if (!node.isStart && !node.isFinish)\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-visited\";\n      }, this.state.delays[this.state.speed] * i);\n    }\n\n    for (let i = 0; i < shortedPath.length; i++) {\n      setTimeout(() => {\n        const node = shortedPath[i];\n        if (!node.isStart && !node.isFinish)\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-path\";\n      }, this.state.delays[this.state.speed] * visitedInOrder.length + 50 * i);\n    }\n    setTimeout(() => {\n      this.setState({ rendering: false });\n    }, this.state.delays[this.state.speed] * visitedInOrder.length + 50 * shortedPath.length);\n  }\n\n  clearVisualizer() {\n    if (!this.state.rendering)\n      this.setState({ grid: this.initializeGrid(true), visualized: false });\n  }\n\n  clearVisitedAndPath() {\n    for (let row = 0; row < this.state.numRow; row++) {\n      for (let col = 0; col < this.state.numCol; col++) {\n        let n = document.getElementById(`node-${row}-${col}`);\n        console.log(n);\n        if (\n          n &&\n          (n.className === \"node node-visited\" ||\n            n.className === \"node node-path\")\n        ) {\n          n.className = \"node\";\n        }\n      }\n    }\n  }\n\n  setSpeed(speed) {\n    this.setState({ speed: speed });\n  }\n\n  render() {\n    const grid = this.state.grid;\n\n    return (\n      <>\n        {this.state.showModal && (\n          <div className=\"modal-backdrop\">\n            <div className=\"modal-content\">\n              <h3>How to use?</h3>\n              <img\n                className=\"card-img-top img-thumbnail\"\n                style={{ marginBottom: \"5px\" }}\n                src={instruct_gif}\n                alt=\"Card image cap\"\n              />\n              <button\n                className=\"btn btn-outline-success my-2 my-sm-0 close-button\"\n                type=\"submit\"\n                onClick={this.hideModal}\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        )}\n        <Navbar bg=\"light\" expand=\"lg\" collapseOnSelect>\n          <Navbar.Brand href=\"#\">Pathfinding Visualizer</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              {/* Dropdown for Algorithm Selection */}\n              <Dropdown as={NavItem}>\n                <Dropdown.Toggle as={NavLink} variant=\"secondary\">\n                  {this.state.currentAlgorithm === -1\n                    ? \"Select an Algorithm\"\n                    : this.state.algorithms[this.state.currentAlgorithm]}\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                  {this.state.algorithms.map((algorithm, algoId) => (\n                    <Dropdown.Item\n                      key={algoId}\n                      onClick={() => this.setAlgorithm(algoId)}\n                    >\n                      {algorithm}\n                    </Dropdown.Item>\n                  ))}\n                </Dropdown.Menu>\n              </Dropdown>\n\n              <Nav.Link onClick={this.clearVisualizer}>Reset</Nav.Link>\n\n              {/* Dropdown for Speed Selection */}\n              <Dropdown as={NavItem}>\n                <Dropdown.Toggle as={NavLink} variant=\"outline-dark\">\n                  Speed: {this.state.speed}\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                  {[\"slow\", \"medium\", \"fast\"].map((speed) => (\n                    <Dropdown.Item\n                      key={speed}\n                      onClick={() => this.setSpeed(speed)}\n                    >\n                      {speed}\n                    </Dropdown.Item>\n                  ))}\n                </Dropdown.Menu>\n              </Dropdown>\n\n              {/* Button to Generate Maze */}\n              <Nav.Link\n                onClick={() => {\n                  primMaze(this.state.grid);\n                  const newGrid = this.state.grid.map((row) => row.slice());\n                  if (newGrid[this.state.SR][this.state.SC].isWall) {\n                    newGrid[this.state.SR][this.state.SC].isWall = false;\n                  }\n                  if (newGrid[this.state.FR][this.state.FC].isWall) {\n                    newGrid[this.state.FR][this.state.FC].isWall = false;\n                  }\n\n                  this.setState({ grid: newGrid, finish: false });\n                  this.clearVisitedAndPath();\n                }}\n                disabled={this.state.rendering}\n              >\n                Generate Maze\n              </Nav.Link>\n\n              <Nav.Link\n                className=\"visualize-btn\"\n                onClick={this.visualizePathfinding}\n              >\n                Visualize\n              </Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n\n        {/* The grid */}\n        <table\n          className=\"grid-container\"\n          onMouseLeave={() => this.handleMouseUp()}\n        >\n          <tbody className=\"grid\">\n            {grid.map((row, rowId) => (\n              <tr className=\"row\" key={rowId}>\n                {row.map((node, nodeId) => (\n                  <Node\n                    key={nodeId}\n                    {...node}\n                    mouseIsPressed={this.state.mouseIsPressed}\n                    onMouseDown={this.handleMouseDown}\n                    onMouseEnter={this.handleMouseEnter}\n                    onMouseUp={this.handleMouseUp}\n                  />\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\n// Note: consider using react-bootstrap for a smoother integration with React.\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}